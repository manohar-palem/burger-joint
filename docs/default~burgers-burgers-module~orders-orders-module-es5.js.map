{"version":3,"sources":["webpack:///src/app/shared/config/burger.config.ts","webpack:///src/app/shared/data/orders.data.ts","webpack:///src/app/shared/pipes/burger-price.pipe.ts","webpack:///src/app/shared/pipes/filter.pipe.ts","webpack:///src/app/shared/pipes/ingredients.pipe.ts","webpack:///src/app/shared/pipes/order-price.pipe.ts","webpack:///src/app/shared/pipes/pipes.module.ts","webpack:///src/app/shared/services/orders.servie.ts","webpack:///src/app/shared/services/price.servie.ts"],"names":["Ingredients","BurgerType","IngredientsPrice","Bun","Salad","Cutlet","Cheese","Chilli","Paneer","Mashroom","IngredientsTitle","MinMaxIngedients","min","max","BurgerTitle","VanillaBurger","CheeseBurger","CutletBurger","SaladBurger","PaneerBurger","ChlliBurger","MashroomBurger","ORDERS","BurgerPricePipe","priceService","currencyPipe","burger","price","getBurgerPrice","transform","name","FilterPipe","list","searchStr","searchProps","length","toLowerCase","filter","item","some","prop","val","split","reduce","dataObj","subPro","toString","includes","Object","keys","IngredientsPipe","entries","ingredients","ingredName","quantity","map","join","OrderPricePipe","order","getOrderPrice","pipes","PipesModule","imports","declarations","exports","providers","OrderssService","burgerId","payload","time","Date","push","id","providedIn","PriceService","totalPrice","additionalCharges","tax","serviceCharges","discount"],"mappings":"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","file":"default~burgers-burgers-module~orders-orders-module-es5.js","sourcesContent":["export enum Ingredients {\r\n  Bun = 'bun',\r\n  Salad = 'salad',\r\n  Cheese = 'cheese',\r\n  Cutlet = 'cutlet',\r\n  Paneer = 'paneer',\r\n  Mashroom = 'mashroom',\r\n  Chilli = 'chilli'\r\n}\r\n\r\nexport enum BurgerType {\r\n  VanillaBurger = 'vanilla_burger',\r\n  CheeseBurger = 'cheese_burger',\r\n  SaladBurger = 'salad_burger',\r\n  CutletBurger = 'cutlet_burger',\r\n  PaneerBurger = 'paneer_burger',\r\n  ChlliBurger = 'chilli_burger',\r\n  MashroomBurger = 'mashroom_burger'\r\n}\r\n\r\nexport const IngredientsPrice = {\r\n  [Ingredients.Bun]: 5,\r\n  [Ingredients.Salad]: 5,\r\n  [Ingredients.Cutlet]: 2,\r\n  [Ingredients.Cheese]: 1,\r\n  [Ingredients.Chilli]: 1,\r\n  [Ingredients.Paneer]: 3,\r\n  [Ingredients.Mashroom]: 4,\r\n};\r\n\r\nexport const IngredientsTitle = {\r\n  [Ingredients.Bun]: 'Bun',\r\n  [Ingredients.Salad]: 'Salad',\r\n  [Ingredients.Cutlet]: 'Cutlet',\r\n  [Ingredients.Cheese]: 'Cheese',\r\n  [Ingredients.Chilli]: 'Jalapeno',\r\n  [Ingredients.Paneer]: 'Paneer',\r\n  [Ingredients.Mashroom]: 'Mashroom',\r\n};\r\n\r\nexport const MinMaxIngedients: {\r\n  [ingredientName: string]: {\r\n    min: number;\r\n    max: number;\r\n  }\r\n} = {\r\n  [Ingredients.Bun]: { min: 1, max: 2 },\r\n  [Ingredients.Salad]: { min: 0, max: 1 },\r\n  [Ingredients.Cutlet]: { min: 0, max: 3 },\r\n  [Ingredients.Cheese]: { min: 0, max: 5 },\r\n  [Ingredients.Paneer]: { min: 0, max: 3 },\r\n  [Ingredients.Mashroom]: { min: 0, max: 2 },\r\n  [Ingredients.Chilli]: { min: 0, max: 4 }\r\n};\r\n\r\nexport const BurgerTitle = {\r\n  [BurgerType.VanillaBurger]: 'Vanilla Burger',\r\n  [BurgerType.CheeseBurger]: 'Cheese Burger',\r\n  [BurgerType.CutletBurger]: 'Cutlet Burger',\r\n  [BurgerType.SaladBurger]: 'Salad Burger',\r\n  [BurgerType.PaneerBurger]: 'Paneer Burger',\r\n  [BurgerType.ChlliBurger]: 'Chilli Burger',\r\n  [BurgerType.MashroomBurger]: 'Mashroom Burger',\r\n};\r\n\r\n\r\n","import { IOrder } from '../models/order.model';\r\n\r\nexport const ORDERS: any[] = [\r\n  {\"burger\":{\"name\":\"\",\"type\":\"cheese_burger\",\"ingredients\":{\"bun\":1,\"cheese\":1},\"title\":\"Cheese Burger\",\"thumbnail\":\"assets/images/burger-placeholder.xs.png\",\"description\":\"\"},\"customer\":{\"name\":\"Prabhu\",\"phone\":\"9987868584\"},\"discount\":2,\"additionalCharges\":{\"tax\":3,\"serviceCharges\":1},\"time\":\"2020-03-29T05:54:13.700Z\"},\r\n  {\"burger\":{\"name\":\"\",\"type\":\"cutlet_burger\",\"ingredients\":{\"bun\":1,\"cutlet\":1,\"cheese\":4,\"mashroom\":1,\"paneer\":2},\"title\":\"Cutlet Burger\",\"thumbnail\":\"assets/images/burger-placeholder.xs.png\",\"description\":\"\"},\"customer\":{\"name\":\"Manohar\",\"phone\":\"9742080968\"},\"discount\":2,\"additionalCharges\":{\"tax\":3,\"serviceCharges\":1},\"time\":\"2020-03-29T05:42:32.024Z\"},\r\n  {\"burger\":{\"name\":\"\",\"type\":\"cheese_burger\",\"ingredients\":{\"bun\":1,\"cheese\":1},\"title\":\"Cheese Burger\",\"thumbnail\":\"assets/images/burger-placeholder.xs.png\",\"description\":\"\"},\"customer\":{\"name\":\"Prabhu\",\"phone\":\"9987868584\"},\"discount\":2,\"additionalCharges\":{\"tax\":3,\"serviceCharges\":1},\"time\":\"2020-03-29T05:35:25.700Z\"},\r\n  {\"burger\":{\"name\":\"\",\"type\":\"salad_burger\",\"ingredients\":{\"bun\":1,\"salad\":1},\"title\":\"Salad Burger\",\"thumbnail\":\"assets/images/burger-placeholder.xs.png\",\"description\":\"\"},\"customer\":{\"name\":\"Soukarya\",\"phone\":\"9999887766\"},\"discount\":2,\"additionalCharges\":{\"tax\":3,\"serviceCharges\":1},\"time\":\"2020-03-29T05:30:05.042Z\"},\r\n  {\"burger\":{\"name\":\"\",\"type\":\"chilli_burger\",\"ingredients\":{\"bun\":1,\"chilli\":1,\"cheese\":3,\"paneer\":3,\"cutlet\":2,\"mashroom\":1},\"title\":\"Chilli Burger\",\"thumbnail\":\"assets/images/burger-placeholder.xs.png\",\"description\":\"\"},\"customer\":{\"name\":\"Pallav\",\"phone\":\"9976655443\"},\"discount\":2,\"additionalCharges\":{\"tax\":3,\"serviceCharges\":1},\"time\":\"2020-03-29T05:25:38.194Z\"}\r\n]\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { CurrencyPipe } from '@angular/common';\r\nimport { IBurger } from './../models/burger.model';\r\nimport { PriceService } from './../services/price.servie';\r\n\r\n@Pipe({\r\n  name: 'burgerPrice'\r\n})\r\nexport class BurgerPricePipe implements PipeTransform {\r\n\r\n  constructor(\r\n    private priceService: PriceService,\r\n    private currencyPipe: CurrencyPipe\r\n  ) {}\r\n\r\n  public transform(burger: IBurger): string {\r\n    const price = this.priceService.getBurgerPrice(burger);\r\n    return this.currencyPipe.transform(price, 'INR');\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe<T> implements PipeTransform {\r\n\r\n  public transform(list: T[], searchStr: string, searchProps: string[] = []): T[] {\r\n    if (!searchStr || !list || list.length === 0) {\r\n      return list;\r\n    }\r\n    searchStr = searchStr.toLowerCase();\r\n    if (searchProps.length) {\r\n      return list.filter( (item: T) => {\r\n        return searchProps.some( prop => {\r\n          const val = prop.split('.').reduce((dataObj, subPro) => {\r\n            return dataObj[subPro];\r\n          }, item);\r\n          return val.toString().toLowerCase().includes(searchStr);\r\n        } );\r\n      } );\r\n    } else {\r\n      return list.filter( (item: T) => {\r\n        return Object.keys(item)\r\n          .some( prop => item[prop].toString().toLowerCase().includes(searchStr) );\r\n      } );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { IBurger } from './../models/burger.model';\r\nimport { IngredientsTitle } from './../config/burger.config';\r\n\r\n@Pipe({\r\n  name: 'ingredients'\r\n})\r\nexport class IngredientsPipe implements PipeTransform {\r\n\r\n  constructor() {}\r\n\r\n  public transform(burger: IBurger): string {\r\n    return Object.entries(burger.ingredients)\r\n      .filter( ([ingredName, quantity]) => quantity )\r\n      .map( ([ingredName, quantity]) => {\r\n        return `${IngredientsTitle[ingredName]}:${quantity}`;\r\n      } ).join(', ');\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { CurrencyPipe } from '@angular/common';\r\n\r\nimport { IOrder } from './../models/order.model';\r\nimport { PriceService } from './../services/price.servie';\r\n\r\n@Pipe({\r\n  name: 'orderPrice'\r\n})\r\nexport class OrderPricePipe implements PipeTransform {\r\n\r\n  constructor(\r\n    private priceService: PriceService,\r\n    private currencyPipe: CurrencyPipe\r\n  ) {}\r\n\r\n  public transform(order: IOrder): string {\r\n    const price = this.priceService.getOrderPrice(order);\r\n    return this.currencyPipe.transform(price, 'INR');\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CurrencyPipe, CommonModule } from '@angular/common';\r\nimport { BurgerPricePipe } from './burger-price.pipe';\r\nimport { OrderPricePipe } from './order-price.pipe';\r\nimport { IngredientsPipe } from './ingredients.pipe';\r\nimport { FilterPipe } from './filter.pipe';\r\n\r\nconst pipes = [\r\n  OrderPricePipe,\r\n  BurgerPricePipe,\r\n  IngredientsPipe,\r\n  FilterPipe\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ...pipes\r\n  ],\r\n  exports: [\r\n    ...pipes\r\n  ],\r\n  providers: [\r\n    CurrencyPipe\r\n  ]\r\n})\r\nexport class PipesModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { ORDERS } from '../data/orders.data';\r\nimport { IOrder } from '../models/order.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderssService {\r\n\r\n  // query list of burgers\r\n  public query(): Observable<IOrder[]> {\r\n    // API call\r\n\r\n    return of(ORDERS);\r\n\r\n  }\r\n\r\n  // get an order by id\r\n  public get(burgerId: string) {\r\n    // API call\r\n  }\r\n\r\n  // save order details\r\n  public post(payload: IOrder): Observable<IOrder> {\r\n    // API call\r\n\r\n    const order: IOrder = {\r\n      ...payload,\r\n      time: new Date()\r\n    };\r\n    ORDERS.push(order);\r\n    return of(order);\r\n  }\r\n\r\n  // delete order by id\r\n  public delete(id: string) {\r\n    // API call\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IBurger } from '../models/burger.model';\r\nimport { IOrder } from '../models/order.model';\r\nimport { IngredientsPrice } from '../config/burger.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PriceService {\r\n\r\n  public getBurgerPrice(burger: IBurger): number {\r\n    return Object.entries(burger.ingredients).reduce((totalPrice, [ingredName, quantity]) => {\r\n      return totalPrice + IngredientsPrice[ingredName] * quantity;\r\n    }, 0);\r\n  }\r\n\r\n  public getOrderPrice({ burger, additionalCharges: { tax, serviceCharges }, discount }: IOrder): number {\r\n    return this.getBurgerPrice(burger) + (tax + serviceCharges) - discount;\r\n  }\r\n\r\n}\r\n"]}